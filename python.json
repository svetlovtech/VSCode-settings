{
	// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// 
	"Print log info": {
		"prefix": "logi",
		"body": [
			"logging.info(${1:var})",
			"$2"
		],
		"description": "Print variable in logging.info"
	},
	"Print log debug": {
		"prefix": "logd",
		"body": [
			"logging.debug(${1:var})",
			"$2"
		],
		"description": "Print variable in logging.debug"
	},
	"Print log to info with name": {
		"prefix": "logiv",
		"body": [
			"logging.info(f'${1:var} = {${1:var}}')",
			"$2"
		],
		"description": "Print variable in logging.info with format"
	},
	"Print log debug to with name": {
		"prefix": "logdv",
		"body": [
			"logging.debug(f'${1:var} = {${1:var}}')",
			"$2"
		],
		"description": "Print variable in logging.debug with format"
	},
	"Print log to info with name and type": {
		"prefix": "logivt",
		"body": [
			"logging.info(f'${1:var} <type:{type(${1:var})}> = {${1:var}}')",
			"$2"
		],
		"description": "Print variable in logging.info with format"
	},
	"Print log debug to with name and type": {
		"prefix": "logdvt",
		"body": [
			"logging.debug(f'${1:var} <type:{type(${1:var})}> = {${1:var}}')",
			"$2"
		],
		"description": "Print variable in logging.debug with format"
	},
	"Print to console": {
		"prefix": "sout",
		"body": [
			"print($1)",
			"$2"
		],
		"description": "Print variable to console"
	},
	"Print to console with name": {
		"prefix": "soutv",
		"body": [
			"print(f'${1:var} = {${1:var}}')",
			"$2"
		],
		"description": "Print variable to console"
	},
	"Print to console with name and type": {
		"prefix": "soutvt",
		"body": [
			"print(f'${1:var} <type:{type(${1:var})}> = {${1:var}}')",
			"$2"
		],
		"description": "Print variable to console"
	},
	"json.dumps": {
		"prefix": "jdumps",
		"body": [
			"json.dumps($1)",
			"$2"
		],
		"description": "Create json dump"
	},
	"json.loads": {
		"prefix": "jdumps",
		"body": [
			"json.loads($1)",
			"$2"
		],
		"description": "Load json data to dict"
	},
	"Http template": {
		"prefix": "http",
		"body": [
			"http://${1:www.google.com}"
		],
		"description": "http template"
	},
	"Https template": {
		"prefix": "https",
		"body": [
			"https://${1:www.google.com}"
		],
		"description": "https template"
	},
	"temp_logging": {
		"prefix": "temp_logging",
		"body": [
			"import logging",
			"",
			"logging.basicConfig(",
			"    level=logging.DEBUG,",
			"    format=\"[%(asctime)s] %(levelname)-12s|process:%(process)-5s|thread:%(thread)-5s|funcName:%(funcName)s|message:%(message)s\",",
			"    handlers=[",
			"        # logging.FileHandler('fileName.log'),",
			"        logging.StreamHandler()",
			"    ])",
			""
		],
		"description": "Logger template"
	},
	"temp_logaction": {
		"prefix": "temp_logaction",
		"body": [
			"logging.info('${1:action} started...')",
			"${2:# Put your action here}",
			"logging.info('${1:action} completed')"
		],
		"description": "Action log wrapper"
	},
	"temp_logwrapper": {
		"prefix": "temp_logwrapper",
		"body": [
			"from time import time",
			"",
			"def log_wrapper(wrapped_func):",
			"def wrapper(*args, **kwargs):",
			"        logging.info(f'STARTING {wrapped_func.__name__} ...')",
			"        start_func_time = time()",
			"        func_result = wrapped_func(*args, **kwargs)",
			"        end_func_time = time()",
			"        work_time_millis = end_func_time - start_func_time",
			"        logging.info(",
			"			 f'ENDED {wrapped_func.__name__} | time elapsed: {work_time_millis:.3f}s')",
			"    return wrapper"
		],
		"description": "Log wrapper"
	},
	"main": {
		"prefix": "main",
		"body": [
			"if __name__ == \"__main__\":",
			"    "
		],
		"description": "if main"
	}
}